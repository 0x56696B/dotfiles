#!/usr/bin/env python3

import os
# from os.path import split
import sys
import argparse
import subprocess

from helper_scripts import get_value_from_encrypted_file

# Define paths and default values
DOTFILES = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
DOTFILES_LOG = os.path.join(DOTFILES, "dotfiles.log")
VAULT_SECRET_FILE = os.path.join(DOTFILES, "vault.secret")

inventory_file = os.path.join(DOTFILES, "inventory/hosts.yml")

# Function to display usage (help) message
def usage():
    print("Usage: {} [options]".format(sys.argv[0]))
    print("  -i, --inventory file      Specify the Ansible inventory file. Defaults to inventory/hosts.yml.")
    print("  -r, --roles roles         Specify comma separated roles to run, such as \"neovim,zsh\", etc.")
    print("  -m, --machines hosts      Specify single host, such as \"local\", or multiples. Defaults to \"all\".")
    print("  -lh, --list-hosts         List Hosts. Used for rerun with targeting and because inventory is encrypted.")
    print("  -h, --help                Display this help message.")
    print("  --debug                   Debug issues")
    sys.exit(1)

# Parse command line arguments
parser = argparse.ArgumentParser(description="Run Ansible playbooks with custom options.")

_ = parser.add_argument("-i", "--inventory", help="Specify the Ansible inventory file.", default=inventory_file)
_ = parser.add_argument("-m", "--machines", help="Specify hosts to target.", default="")
_ = parser.add_argument("-r", "--roles", help="Specify comma-separated roles to run.", default="")
_ = parser.add_argument("-lh", "--list-hosts", help="List Hosts.", action="store_true")
_ = parser.add_argument("-lr", "--list-roles", help="List Roles.", action="store_true")
_ = parser.add_argument("--debug", help="Debug issues", action="store_true")

args: argparse.Namespace = parser.parse_args()

inventory_file: str = args.inventory
hosts: str = args.machines
roles: str = args.roles
list_hosts: bool = args.list_hosts
list_roles: bool = args.list_roles
debug_flag: bool = args.debug

# Initial ansible command
ansible_cmd = f"ansible-playbook {os.path.join(DOTFILES, 'main.yml')} -i {inventory_file}"

# Check if become password is present in the inventory file for the specified hosts
become_pass_present = 0
if hosts:
    vault_file_present = os.path.isfile(VAULT_SECRET_FILE)

    for host in hosts.split(","):
        if host == "all":
            break

        inventory_file_host = f"inventory/host_vars/{host}.yml";
        key = "ansible_become_password"

        pass_value = get_value_from_encrypted_file(inventory_file_host, key, VAULT_SECRET_FILE, vault_file_present)
        if pass_value == "":
            become_pass_present = 0
            break

        become_pass_present = 1

# Handle become password prompt conditionally
if become_pass_present != 1:
    if sys.platform == "darwin" and "system-update" in roles.split(","):
        ansible_cmd += " --ask-become-pass"
    if sys.platform == "linux":
        ansible_cmd += " --ask-become-pass"

# Use Vault file, if present
if os.path.isfile(VAULT_SECRET_FILE):
    ansible_cmd += f" --vault-password-file {VAULT_SECRET_FILE}"
else:
    ansible_cmd += " --ask-vault-password"

# List roles
if list_roles:
    ansible_cmd += " --list-roles"
    _ = os.system("ls -1 roles")
    sys.exit(0)

# List hosts in inventory file (useful, because they are encrypted)
if list_hosts:
    ansible_cmd += " --list-hosts"
    _ = subprocess.run(ansible_cmd, shell=True)
    sys.exit(0)

# Specify for which hosts/groups/machines to execute (in inventory)
if hosts:
    ansible_cmd += f" -l {hosts}"
else:
    ansible_cmd += " -l all"

# Specify which roles to run
if roles:
    ansible_cmd += f" --tags {roles}"
else:
    ansible_cmd += " --tags \"all\""

# Debug issues/Run with verbosity
if debug_flag:
    ansible_cmd += " -vvv"

# Load and setup ansible (assuming this is a source command for a shell script)
setup_script = os.path.join(DOTFILES, "bin/setup.sh")
_ = subprocess.run(f"source {setup_script} && load_setup", shell=True)

# Execute the ansible command
print(f"Executing command: {ansible_cmd}")
_ = subprocess.run(ansible_cmd, shell=True)
