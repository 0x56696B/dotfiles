# Dotnet Autocompletion
_dotnet_zsh_complete() {
  local completions=("$(dotnet complete "$words")")

  # If the completion list is empty, just continue with filename selection
  if [ -z "$completions" ]
  then
    _arguments '*::arguments: _normal'
    return
  fi

  # This is not a variable assigment, don't remove spaces!
  _values = "${(ps:\n:)completions}"
}

# Start a tmux session and give the user the choice of selecting one
_tmux_startup() {
  if [[ -n "$TMUX" ]];
  then
    return ""
  fi

  chosen_session=$(tmux ls | fzf \
    --border \
    --margin 1 \
    --padding 1 \
    --info inline \
    --layout reverse \
    --header $'Select TMUX session\\n\\n' \
    --prompt 'Session> ' \
    --bind 'ctrl-p:up,ctrl-n:down,J:down,K:up' | cut -d':' -f 1)

  tmux attach -t $chosen_session
}

# Get OS script
_find_os() {
    local UNAME OS
    # Determine OS platform
    UNAME=$(uname | tr "[:upper:]" "[:lower:]")
    # If Linux, try to determine specific distribution
    if [[ "$UNAME" == "linux" ]]; then
        # First check if os-release is available
        if [[ -f /etc/os-release ]]; then
            OS=$(grep -Po "(?<=^ID=).*(?=$)" /etc/os-release)
        # If available, use LSB to identify distribution
        elif [[ -f /etc/lsb-release || -d /etc/lsb-release.d ]]; then
            OS=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
        # Otherwise, use release info file
        else
            OS=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        fi

    elif [[ "$UNAME" == "darwin" ]]; then
      OS="darwin"

    else
      # For everything else (or if above failed), just use generic identifier
      OS=$UNAME
    fi

    OS=${(L)OS}
    echo $OS
}

