---
- name: "Fonts | {{ ansible_distribution }} | Setting Temp Variables"
  ansible.builtin.set_fact:
    script_cache_dir: "/tmp"
    user_fonts_dir: "{{ ansible_env.HOME }}/.local/share/fonts"
    fonts:
      - name: font_awesome
        url: https://github.com/FortAwesome/Font-Awesome/archive/refs/tags/6.5.1.zip
      - name: ubuntu
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Ubuntu.zip
      - name: fira_code
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/FiraCode.zip
      - name: hack
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Hack.zip
      - name: jetbrains_mono
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip

- name: "Fonts | {{ ansible_distribution }} | Install Dependencies"
  ansible.builtin.apt:
    name:
      - curl
    state: present
  become: true
  become_user: root

- name: "Fonts | {{ ansible_distribution }} | Create User Fonts Directory"
  ansible.builtin.file:
    path: "{{ user_fonts_dir }}"
    state: directory

- name: "Fonts | {{ ansible_distribution }} | Downloading Fonts"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ script_cache_dir }}/{{ item.name }}.zip"
    timeout: 60
    force: true
  loop: "{{ fonts }}"

- name: "Fonts | {{ ansible_distribution }} | Extracting Archived Fonts"
  ansible.builtin.unarchive:
    src: "{{ script_cache_dir }}/{{ item.name }}.zip"
    dest: "{{ user_fonts_dir }}"
    remote_src: yes
  loop: "{{ fonts }}"

- name: "Fonts | {{ ansible_distribution }} | Cleanup ZIP"
  ansible.builtin.file:
    path: "{{ script_cache_dir }}/{{ item.name }}.zip"
    state: absent
  loop: "{{ fonts }}"

- name: "Fonts | {{ ansible_distribution }} | Find all non-TTF files"
  ansible.builtin.find:
    path: "{{ user_fonts_dir }}"
    patterns: "^(?!.*\\.(ttf|ttc)$).+$"
    use_regex: true
    file_type: file
  register: files_to_delete

- name: "Fonts | {{ ansible_distribution }} | Cleanup unzipped files"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.files }}"

