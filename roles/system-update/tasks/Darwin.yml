---
- name: "System Update | {{ ansible_distribution }} | Update Homebrew"
  tags:
    - homebrew
  block:
    - name: "System Update | {{ ansible_distribution }} | Update Homebrew itself"
      community.general.homebrew:
        update_homebrew: true
      register: homebrew_update_result
      changed_when: "'Homebrew already up-to-date' not in homebrew_update_result.msg"

    - name: "System Update | {{ ansible_distribution }} | Update Homebrew packages"
      poll: 0
      community.general.homebrew:
        upgrade_all: true
      register: homebrew_packages_update_result
      changed_when: "'Homebrew packages already upgraded' not in homebrew_packages_update_result.msg"

    - name: "System Update | {{ ansible_distribution }} | Update Homebrew Casks"
      poll: 0
      community.general.homebrew_cask:
        upgrade_all: true
      register: homebrew_casks_update_result
      changed_when: "'Homebrew casks already upgraded' not in homebrew_casks_update_result.msg"

- name: "System Update | {{ ansible_distribution }} | Update Apps from App Store"
  tags:
    - app-store
  poll: 0
  command: mas upgrade
  register: mas_upgrade_result
  changed_when: mas_upgrade_result.msg != ''

- name: "System Update | {{ ansible_distribution }} | Update Neovim config"
  tags:
    - neovim
  block:
    - name: "System Update | {{ ansible_distribution }} | Update Neovim LSPs"
      ansible.builtin.command: nvim --headless "+MasonToolsUpdateSync" +qa
      changed_when: false

    - name: "System Update | {{ ansible_distribution }} | Update Neovim Lazy packages"
      ansible.builtin.command: nvim --headless "+Lazy sync" +qa
      register: neovim_lazy_result
      changed_when: neovim_lazy_result.msg != ''

    - name: "System Update | {{ ansible_distribution }} | Update Neovim TreeSitter"
      ansible.builtin.command: nvim --headless +"TSUpdateSync lua" +qa
      register: neovim_ts_result
      changed_when: neovim_ts_result.msg != ''

- name: "System Update | {{ ansible_distribution }} | Update ZInit"
  ansible.builtin.shell: |
    source $HOME/.zshrc
    source $HOME/.zshenv

    zinit update -a -p -q
  args:
    chdir: "{{ ansible_user_dir }}"
    executable: /bin/zsh
  register: zinit_update_result
  become_user: "{{ ansible_user }}"
  become: true
  changed_when: "'Already up-to-date' not in zinit_update_result.stdout"
  tags:
    - zinit

# - name: "System Update | {{ ansible_distribution }} | Check for Software Updates"
#   ansible.builtin.command: softwareupdate -l
#   register: update_list
#   become: yes
#   become_user: root
#
# - name: "System Update | {{ ansible_distribution }} | Download System Update"
#   ansible.builtin.command: softwareupdate -d -a --agree-to-license
#   become: yes
#   become_user: root
#   when: update_list.stdout.find("No new software available") == -1
#
# - name: "System Update | {{ ansible_distribution }} | Install System Update"
#   ansible.builtin.command: softwareupdate -i --agree-to-license
#   become: yes
#   become_user: root
#   when: update_list.stdout.find("No new software available") == -1
